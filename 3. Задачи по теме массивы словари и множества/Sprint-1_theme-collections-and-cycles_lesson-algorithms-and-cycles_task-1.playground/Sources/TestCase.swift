import Foundation

// MARK: - üõ† –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞
// - –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω–∞ –º–æ–¥–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

public struct TestCase {

    let array: [Int]
    let result: (min: Int, max: Int)
}

// MARK: - üõ† –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
// - –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

extension Array where Element == TestCase {

    public static let `default`: [TestCase] = [
        TestCase(array: [0], result: (min: 0, max: 0)),
        TestCase(array: [0, 1, 2], result: (min: 0, max: 2)),
        TestCase(array: [1, 0, 2], result: (min: 0, max: 2)),
        TestCase(array: [1, 2, 0], result: (min: 0, max: 2)),
        TestCase(array: [1, 1, 1], result: (min: 1, max: 1)),
        TestCase(array: [-1, 0, 2], result: (min: -1, max: 2)),
        TestCase(array: [-1, -2, -3], result: (min: -3, max: -1)),
    ]
}
