import Foundation

// MARK: - üõ† –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤
// - –ó–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞–Ω –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ç–µ—Å—Ç—ã
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

public struct TestRunner {

    public static func runTests(_ testCases: [TestCase]) {
        print("‚ñ∂Ô∏è Starting test run with \(testCases.count) test cases ...")

        var failedTestsIndexes: [Int] = []
        for (i, testCase) in testCases.enumerated() {
            print("\nRunning test case #\(i) ...")
            if testCase.testFunction() {
                print("‚úÖ SUCCESS: \(testCase.successMessage)")
            } else {
                print("‚ùå FAILURE: \(testCase.failureMessage)")
                failedTestsIndexes.append(i)
            }
        }

        print("\nTest run finished")
        if failedTestsIndexes.isEmpty {
            print("‚úÖ All \(testCases.count) test cases succeeded!")
        } else {
            print("‚ùå There are \(failedTestsIndexes.count) of \(testCases.count) failed test cases")
            let testCasesString = failedTestsIndexes.map { "#\($0)" }.joined(separator: ",")
            print("Failed test cases: \(testCasesString)")
        }
    }
}
