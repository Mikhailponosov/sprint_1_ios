import Foundation

// MARK: - üõ† –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞
// - –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω–∞ –º–æ–¥–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

public struct TestCase {

    let testFunction: () -> String?
    let successMessage: String
    let failureMessage: String
}

// MARK: - üõ† –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
// - –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

extension Array where Element == TestCase {

    public static func `default`(_ input: Any) -> [TestCase] {
        guard let dictionary = input as? [String: Int] else {
            print("‚ùå FAILURE: Variable dictionary is NOT an [String: Int] type. It has type \(type(of: input))")
            return []
        }
        let fruits = ["–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω", "–º–∞–Ω–≥–æ"]
        return [
            TestCase(
                testFunction: {
                    return dictionary.isEmpty ? "" : nil
                },
                successMessage: "Variable dictionary is NOT empty",
                failureMessage: "Variable dictionary is EMPTY"
            ),
            TestCase(
                testFunction: {
                    for fruit in dictionary.keys {
                        if !fruits.contains(fruit) {
                            return fruit
                        }
                    }
                    return nil
                },
                successMessage: "Variable dictionary contains only relevant fruits",
                failureMessage: "Variable dictionary contains redundant fruit:"
            ),
            TestCase(
                testFunction: {
                    var check = ""
                    
                    let bananaAmount = dictionary["–±–∞–Ω–∞–Ω"]
                    if bananaAmount != 5 {
                        check += "–±–∞–Ω–∞–Ω ‚Äì amount " + String(describing: bananaAmount)
                    }
                    let orangeAmount = dictionary["–∞–ø–µ–ª—å—Å–∏–Ω"]
                    if orangeAmount != 3 {
                        check += "–∞–ø–µ–ª—å—Å–∏–Ω ‚Äì amount " + String(describing: orangeAmount)
                    }
                    let mangoAmount = dictionary["–º–∞–Ω–≥–æ"]
                    if mangoAmount != 10 {
                        check += "–º–∞–Ω–≥–æ ‚Äì amount " + String(describing: mangoAmount)
                    }
                    
                    return check.isEmpty ? nil : check
                },
                successMessage: "Variable dictionary contains correct amount of fruits",
                failureMessage: "Variable dictionary contains incorrect amount of fruit:"
            )
        ]
    }
}
