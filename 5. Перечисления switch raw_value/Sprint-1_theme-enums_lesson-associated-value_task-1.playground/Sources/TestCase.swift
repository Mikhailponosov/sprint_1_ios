import Foundation

// MARK: - üõ† –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞
// - –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω–∞ –º–æ–¥–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

public struct TestCase {

    let testFuntction: () -> Bool
    let successMessage: String
    let failureMessage: String
}

// MARK: - üõ† –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
// - –ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
// - ‚ö†Ô∏è –ù–µ –º–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

extension Array where Element == TestCase {

    public static func `default`(_ object: Any, _ objectName: Any) -> [TestCase] {
        let mirror = Mirror(reflecting: object)
        return [
            TestCase(
                testFuntction: { mirror.displayStyle == .enum },
                successMessage: "moon is of an Enum type",
                failureMessage: "moon is NOT of an Enum type. It has type \(String(describing: mirror.displayStyle)))"
            ),
            TestCase(
                testFuntction: { type(of: objectName) == String.self },
                successMessage: "objectName is of an String type",
                failureMessage: "objectName is NOT of an Enum type. It has type \(type(of: objectName)))"
            ),
            TestCase(
                testFuntction: { "\(object)" == "satelite(1737.4, \"–õ—É–Ω–∞\")" },
                successMessage: "variable moon is equal to \"satelite(1737.4, \"–õ—É–Ω–∞\")\"",
                failureMessage: "variable moon is NOT equal to \"satelite(1737.4, \"–õ—É–Ω–∞\")\" . It's value is \(object))"
            ),
        ]
    }
}
